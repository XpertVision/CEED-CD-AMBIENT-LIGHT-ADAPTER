#ifndef _A_AMBIENT_H_
#define _A_AMBIENT_H_

#include <vector>
#include <cstdint>

#include "AModes.h"

//Some values
namespace ambient
{
  void ReadSavedStatments() noexcept;
  void PrepareData() noexcept;
  void SetSpeed() noexcept;

  constexpr uint8_t msgArraySize = 9;

  namespace mode
  {
    static uint8_t modeForwardDreamingArray[msgArraySize]    = { 0x7b, 0xff, 0x03, 0x01, 0xff, 0xff, 0xff, 0xff, 0xbf };
    static uint8_t modeForward6ColorBlueArray[msgArraySize]  = { 0x7b, 0xff, 0x03, 0x0d, 0xff, 0xff, 0xff, 0xff, 0xbf };
    static uint8_t modeForward6ColorCyanArray[msgArraySize]  = { 0x7b, 0xff, 0x03, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xbf };
    static uint8_t modeForward6ColorWhiteArray[msgArraySize] = { 0x7b, 0xff, 0x03, 0x15, 0xff, 0xff, 0xff, 0xff, 0xbf };

    static uint8_t modeSpeedArray[msgArraySize] = { 0x7b, 0xff, 0x02, 0x3C, 0xff, 0x00, 0xff, 0xff, 0xbf}; //60% speed
    
    #ifdef SPORT_MODE
    extern bool bIsSportMode;
    extern bool bIsSportModeRejected;
    #endif
  }
  namespace colors
  {
    static uint8_t colorWhite[msgArraySize]         = { 0x7b, 0x00, 0x07, 0xff, 0xff, 0xff, 0x00, 0xff, 0xbf };
    static uint8_t colorYellow[msgArraySize]        = { 0x7b, 0x00, 0x07, 0xff, 0xff, 0x00, 0x00, 0xff, 0xbf };
    static uint8_t colorOrrange[msgArraySize]       = { 0x7b, 0x00, 0x07, 0xff, 0x64, 0x00, 0x00, 0xff, 0xbf };
    static uint8_t colorRed[msgArraySize]           = { 0x7b, 0x00, 0x07, 0xff, 0x00, 0x00, 0x00, 0xff, 0xbf };
    static uint8_t colorPink[msgArraySize]          = { 0x7b, 0x00, 0x07, 0xff, 0x00, 0x52, 0x00, 0xff, 0xbf };
    static uint8_t colorKIATheme[msgArraySize]      = { 0x7b, 0x00, 0x07, 0xe6, 0x00, 0xff, 0x00, 0xff, 0xbf };
    static uint8_t colorPurple[msgArraySize]        = { 0x7b, 0x00, 0x07, 0xa0, 0x00, 0xff, 0x00, 0xff, 0xbf };
    static uint8_t colorBlue[msgArraySize]          = { 0x7b, 0x00, 0x07, 0x00, 0x00, 0xff, 0x00, 0xff, 0xbf };
    static uint8_t colorCyan[msgArraySize]          = { 0x7b, 0x00, 0x07, 0x00, 0xcd, 0xff, 0x00, 0xff, 0xbf };
    static uint8_t colorGreen[msgArraySize]         = { 0x7b, 0x00, 0x07, 0x00, 0xff, 0x00, 0x00, 0xff, 0xbf };
    static uint8_t colorDarkTurquoise[msgArraySize] = { 0x7b, 0x00, 0x07, 0x00, 0xff, 0x50, 0x00, 0xff, 0xbf };
  }
  //on\off
  namespace statments
  {
	  static uint8_t onID                 = 0x01;
	  static uint8_t offID                = 0x00;
	  static const uint8_t onOffIDPos     = 3;

	  static uint8_t onOffArray[msgArraySize] = { 0x7b, 0xff, 0x04, 0x00, 0xff, 0xff, 0xff, 0xff, 0xbf };

    extern std::vector<uint8_t*> vAllModes;
    extern uint8_t currentMode;
	  extern bool bIsEnabled;
  }
  //brightness
  namespace brightness
  {
	  static const uint8_t brightnessIDPos = 4;

	  static uint8_t brightnessArray[msgArraySize] = { 0x7b, 0xff, 0x01, 0x00, 0x03, 0x00, 0xff, 0xff, 0xbf }; //3% for start

    extern uint8_t brightnessValue;
  }
}

#endif _A_AMBIENT_H_